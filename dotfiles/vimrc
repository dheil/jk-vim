" Use Vim settings, rather then Vi settings. This setting must be as early as
" possible, as it has side effects.
set nocompatible

" auto reload .vimrc if it is changed
autocmd! bufwritepost .vimrc source %

" Leader
let mapleader = ","

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
" disabled to detect double edit
"set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=200
set undolevels=200
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

if filereadable(expand("~/.vim/bundles.vim"))
  source ~/.vim/bundles.vim
endif

filetype plugin indent on

" group autocmd's to give vim a chance to overwrite them when it resources
" this config file.
" http://learnvimscriptthehardway.stevelosh.com/chapters/14.html
augroup vimrcEx
  " clear group
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Cucumber navigation commands
  autocmd User Rails Rnavcommand step features/step_definitions -glob=**/* -suffix=_steps.rb
  autocmd User Rails Rnavcommand config config -glob=**/* -suffix=.rb -default=routes

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Color scheme
colorscheme hybrid
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

" Make it obvious where 80 characters is
set textwidth=79 " width of document (used by gd)
set colorcolumn=+1
set nowrap " don't automatically wrap on load
set fo-=t  " don't automatically wrap text when typing
highlight ColorColumn ctermbg=233

" easier formatting of paragraphs
vmap Q gq
nmap Q gqap

" Numbers
set number " show line numbers
set numberwidth=5

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

"spelling
if has("spell")
  " turn spelling on by default
  " set spell

  " toggle spelling with F4 key
  map <F4> :set spell!<CR><Bar>:echo "Spell Check: " . strpart("OffOn", 3 * &spell, 3)<CR>

  " they were using white on white
  highlight PmenuSel ctermfg=black ctermbg=lightgray

  " limit it to just the top 10 items
  set sps=best,10
endif

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>

" Switch between the last two files
"nnoremap <leader><leader> <c-^>

" Get off my lawn
"nnoremap <Left> :echoe "Use h"<CR>
"nnoremap <Right> :echoe "Use l"<CR>
"nnoremap <Up> :echoe "Use k"<CR>
"nnoremap <Down> :echoe "Use j"<CR>

" map <silent> ü <C-]>
map <silent> ü [
inoremap <silent> ü [
map <silent> ö :
inoremap <silent> ö :
map <silent> ä ]
inoremap <silent> ä ]
map <silent> Ü {
map <silent> Ä }
inoremap <silent> Ü {
inoremap <silent> Ä }
noremap <silent> ß /
inoremap <silent> ß /

inoremap <silent> jj <esc>
inoremap <silent> jk <esc>
inoremap <silent> jkk jk
"inoremap <silent> <esc> :echoe "Use jj"<CR>
nnoremap <silent> <leader>. :

inoremap <silent> o" ö
inoremap <silent> a" ä
inoremap <silent> u" ü

" vim-rspec map <silent>pings
nnoremap <silent> <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <silent> <Leader>s :call RunNearestSpec()<CR>
nnoremap <silent> <Leader>l :call RunLastSpec()<CR>

" Run commands that require an interactive shell
nnoremap <silent> <Leader>r :RunInInteractiveShell<space>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Always use vertical diffs
set diffopt+=vertical

"---
" GUI Font / some inspirations:
"set guifont=Menlo:h12
"set guifont=Monaco:h12
"set guifont=Monospace:h12
"set guifont=Droid\ Sans\ Mono\ for\ Powerline:h13
"set guifont=Source\ Code\ Pro\ for\ Powerline:h13
" my favorite font
set guifont=Inconsolata-g\ for\ Powerline:h13

"make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

"if filereadable($HOME . "/.vim/filetypes.vim")
"  source ~/.vim/filetypes.vim
"endif

" Better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed

" cmd-s for 'save file' {{{ - not working on mac in iTerm2
" Works in normal mode, must press Esc first"
":map <T-s> :w<kEnter>
" Works in insert mode, saves and puts back in insert mode"
":imap <T-s> <Esc>:w<kEnter>i
" }}}

" Quick quit command
noremap <Leader>e :quit<CR> " Quit current window
noremap <Leader>E :qa!<CR>  " Quit all windows

" disable bell (beep) and flashing screen
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" map sort function to a key
vnoremap <Leader>s :sort<CR>

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Make Y behave like other capitals
map Y y$

hi Normal ctermbg=NONE

set fillchars=vert:\┃,diff:⎼,fold:⎼

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
